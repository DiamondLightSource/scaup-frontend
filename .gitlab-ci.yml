image: node:22.11.0

variables:
  IMAGE_NAME: gcr.io/diamond-privreg/lims/scaup/frontend:$CI_COMMIT_TAG-$CI_COMMIT_SHORT_SHA

stages:
  - test
  - build
  - sync

build-job:
  stage: test
  tags:
    - argus
  script:
    - yarn install
    - yarn build
  rules:
    - if: $CI_COMMIT_MESSAGE !~ /\[WIP\].*/

unit-test-job:
  stage: test
  tags:
    - argus
  before_script:
    - yarn install
  script:
    - yarn run test
  rules:
    - if: $CI_COMMIT_MESSAGE !~ /\[WIP\].*/
  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml

build-image:
  stage: build
  tags:
    - docker-image
  image:
    name: gcr.io/diamond-privreg/container-tools/kaniko-executor:v1.9.1-debug
    entrypoint: [""]
  only:
    - tags
  script:
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile Dockerfile --destination $IMAGE_NAME --build-arg APP_VERSION=$CI_COMMIT_TAG --build-arg API_URL=/api --build-arg DEV_CONTACT=guilherme.de-freitas@diamond.ac.uk

check-for-vulns:
  stage: build
  tags:
    - argus
  image:
    name: aquasec/trivy:0.42.1
    entrypoint: [""]
  only:
    - tags
  script:
    - trivy --exit-code 1 --cache-dir /scratch/$USER/cache/trivy/ image -s CRITICAL $IMAGE_NAME
  needs:
    - build-image

sync-deploy-versions:
  stage: sync
  tags:
    - docker-image
  image:
    name: alpine/curl
  only:
    - tags
  script:
    - curl --request POST "https://${CI_SERVER_HOST}/api/v4/projects/6565/trigger/pipeline?token=${CI_PIPELINE_TRIGGER}&ref=${CI_DEFAULT_BRANCH}"
  