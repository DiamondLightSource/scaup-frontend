/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/shipments/{shipmentId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Shipment
     * @description Get shipment data
     */
    get: operations["get_shipment_shipments__shipmentId__get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/shipments/{shipmentId}/unassigned": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Unassigned
     * @description Get unassigned items in shipment
     */
    get: operations["get_unassigned_shipments__shipmentId__unassigned_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/shipments/{shipmentId}/push": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Push Shipment
     * @description Push shipment to ISPyB. Unassigned items (such as a container with no parent top level
     *     container) are ignored.
     */
    post: operations["push_shipment_shipments__shipmentId__push_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/shipments/{shipmentId}/topLevelContainers": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Top Level Containers
     * @description Get top level containers in shipment
     */
    get: operations["get_top_level_containers_shipments__shipmentId__topLevelContainers_get"];
    put?: never;
    /**
     * Create Top Level Container
     * @description Create new container in shipment
     */
    post: operations["create_top_level_container_shipments__shipmentId__topLevelContainers_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/shipments/{shipmentId}/containers": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create Container
     * @description Create new container in shipment
     */
    post: operations["create_container_shipments__shipmentId__containers_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/shipments/{shipmentId}/samples": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Samples
     * @description Get samples in shipment
     */
    get: operations["get_samples_shipments__shipmentId__samples_get"];
    put?: never;
    /**
     * Create Sample
     * @description Create new sample in shipment
     */
    post: operations["create_sample_shipments__shipmentId__samples_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/shipments/{shipmentId}/request": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Shipment Request
     * @description Get shipment request
     */
    get: operations["get_shipment_request_shipments__shipmentId__request_get"];
    put?: never;
    /**
     * Create Shipment Request
     * @description Create new shipment request
     */
    post: operations["create_shipment_request_shipments__shipmentId__request_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/shipments/{shipmentId}/preSession": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Pre Session
     * @description Create new pre session information
     */
    get: operations["get_pre_session_shipments__shipmentId__preSession_get"];
    /**
     * Create Pre Session
     * @description Upsert new pre session information
     */
    put: operations["create_pre_session_shipments__shipmentId__preSession_put"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/proposals/{proposalReference}/sessions/{visitNumber}/shipments": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Shipments
     * @description Get shipments in session
     */
    get: operations["get_shipments_proposals__proposalReference__sessions__visitNumber__shipments_get"];
    put?: never;
    /**
     * Create Shipment
     * @description Create new shipment in session
     */
    post: operations["create_shipment_proposals__proposalReference__sessions__visitNumber__shipments_post"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/proposals/{proposalReference}/sessions/{visitNumber}/samples": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Samples
     * @description Get samples in session
     */
    get: operations["get_samples_proposals__proposalReference__sessions__visitNumber__samples_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/proposals/{proposalReference}/data": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Shipment Data
     * @description Get lab data for the proposal (lab contacts, proteins...)
     *
     *     We can skip auth on this one since it is calling Expeye, and auth is done there
     */
    get: operations["get_shipment_data_proposals__proposalReference__data_get"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/samples/{sampleId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * Delete Sample
     * @description Create new sample in shipment
     */
    delete: operations["delete_sample_samples__sampleId__delete"];
    options?: never;
    head?: never;
    /**
     * Edit Sample
     * @description Edit existing sample
     */
    patch: operations["edit_sample_samples__sampleId__patch"];
    trace?: never;
  };
  "/containers/{containerId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * Delete Container
     * @description Delete container in shipment
     */
    delete: operations["delete_container_containers__containerId__delete"];
    options?: never;
    head?: never;
    /**
     * Edit Container
     * @description Edit existing container
     */
    patch: operations["edit_container_containers__containerId__patch"];
    trace?: never;
  };
  "/topLevelContainers/{topLevelContainerId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * Delete Container
     * @description Create new container in shipment
     */
    delete: operations["delete_container_topLevelContainers__topLevelContainerId__delete"];
    options?: never;
    head?: never;
    /**
     * Edit Container
     * @description Edit existing container
     */
    patch: operations["edit_container_topLevelContainers__topLevelContainerId__patch"];
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** ContainerIn */
    ContainerIn: {
      /** Toplevelcontainerid */
      topLevelContainerId?: number | null;
      /** Parentid */
      parentId?: number | null;
      /** Capacity */
      capacity?: number | null;
      /** Details */
      details?: Record<string, never> | null;
      /** Location */
      location?: number | null;
      /**
       * Requestedreturn
       * @default false
       */
      requestedReturn: boolean | null;
      /** Registeredcontainer */
      registeredContainer?: number | null;
      /**
       * Name
       * @description Base container name. If name is not provided, the container's type followedby the container index is used
       */
      name?: string | null;
      /** Comments */
      comments?: string | null;
      /**
       * Type
       * @enum {string}
       */
      type: "puck" | "falconTube" | "gridBox" | "genericContainer";
    };
    /** ContainerOut */
    ContainerOut: {
      /** Toplevelcontainerid */
      topLevelContainerId?: number | null;
      /** Parentid */
      parentId?: number | null;
      /** Capacity */
      capacity?: number | null;
      /** Details */
      details?: Record<string, never> | null;
      /** Location */
      location?: number | null;
      /**
       * Requestedreturn
       * @default false
       */
      requestedReturn: boolean | null;
      /** Registeredcontainer */
      registeredContainer?: number | null;
      /**
       * Name
       * @description Base container name. If name is not provided, the container's type followedby the container index is used
       */
      name?: string | null;
      /** Comments */
      comments?: string | null;
      /** Id */
      id: number;
    };
    /** GenericItem */
    GenericItem: {
      /** Id */
      id: number;
      /** Name */
      name: string;
      data: components["schemas"]["GenericItemData"];
      /** Children */
      children?: components["schemas"]["GenericItem"][] | null;
    };
    /** GenericItemData */
    GenericItemData: {
      /** Type */
      type: string;
      [key: string]: unknown;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /** MixedShipment */
    MixedShipment: {
      /** Id */
      id: number;
      /** Proposalcode */
      proposalCode: string;
      /** Proposalnumber */
      proposalNumber: number;
      /** Visitnumber */
      visitNumber: number;
      /** Name */
      name: string;
      /** Comments */
      comments?: string | null;
      /** Creationdate */
      creationDate: string | null;
      /** Status */
      status?: string | null;
      /** Shipmentrequest */
      shipmentRequest?: number | null;
      /**
       * Creationstatus
       * @default draft
       * @enum {string}
       */
      creationStatus: "draft" | "submitted";
    };
    /** OptionalContainer */
    OptionalContainer: {
      /** Toplevelcontainerid */
      topLevelContainerId?: number | null;
      /** Parentid */
      parentId?: number | null;
      /** Capacity */
      capacity?: number | null;
      /** Details */
      details?: Record<string, never> | null;
      /** Location */
      location?: number | null;
      /**
       * Requestedreturn
       * @default false
       */
      requestedReturn: boolean | null;
      /** Registeredcontainer */
      registeredContainer?: number | null;
      /**
       * Name
       * @description Base container name. If name is not provided, the container's type followedby the container index is used
       */
      name?: string | null;
      /** Comments */
      comments?: string | null;
      /** Type */
      type?: ("puck" | "falconTube" | "gridBox" | "genericContainer") | null;
    };
    /** OptionalSample */
    OptionalSample: {
      /** Containerid */
      containerId?: number | null;
      /** Location */
      location?: number | null;
      /** Details */
      details?: Record<string, never> | null;
      /** Comments */
      comments?: string | null;
      /**
       * Name
       * @description Sample name, if not provided, the provided protein's name followed by the sample index is used
       */
      name?: string | null;
      /** Proteinid */
      proteinId?: number | null;
      /** Type */
      type?: string | null;
    };
    /** OptionalTopLevelContainer */
    OptionalTopLevelContainer: {
      /** Toplevelcontainerid */
      topLevelContainerId?: number | null;
      /** Status */
      status?: string | null;
      /** Capacity */
      capacity?: number | null;
      /** Details */
      details?: Record<string, never> | null;
      /** Location */
      location?: number | null;
      /** Comments */
      comments?: string | null;
      /**
       * Name
       * @description Base top level container name. If name is not provided, the container's type followedby the container index is used
       */
      name?: string | null;
      /** Type */
      type?: "dewar" | null;
      /** Code */
      code?: string | null;
      /** Barcode */
      barCode?: string | null;
    };
    /** Paged[MixedShipment] */
    Paged_MixedShipment_: {
      /** Items */
      items: components["schemas"]["MixedShipment"][];
      /** Total */
      total: number;
      /** Page */
      page: number;
      /** Limit */
      limit: number;
    };
    /** Paged[SampleOut] */
    Paged_SampleOut_: {
      /** Items */
      items: components["schemas"]["SampleOut"][];
      /** Total */
      total: number;
      /** Page */
      page: number;
      /** Limit */
      limit: number;
    };
    /** Paged[TopLevelContainerOut] */
    Paged_TopLevelContainerOut_: {
      /** Items */
      items: components["schemas"]["TopLevelContainerOut"][];
      /** Total */
      total: number;
      /** Page */
      page: number;
      /** Limit */
      limit: number;
    };
    /** PreSessionIn */
    PreSessionIn: {
      /** Details */
      details?: Record<string, never> | null;
    };
    /** PreSessionOut */
    PreSessionOut: {
      /** Details */
      details?: Record<string, never> | null;
    };
    /** SampleIn */
    SampleIn: {
      /** Containerid */
      containerId?: number | null;
      /** Location */
      location?: number | null;
      /** Details */
      details?: Record<string, never> | null;
      /** Comments */
      comments?: string | null;
      /**
       * Name
       * @description Sample name, if not provided, the provided protein's name followed by the sample index is used
       */
      name?: string | null;
      /** Proteinid */
      proteinId: number;
      /** Type */
      type?: string | null;
      /**
       * Copies
       * @default 1
       */
      copies: number;
    };
    /** SampleOut */
    SampleOut: {
      /** Containerid */
      containerId?: number | null;
      /** Location */
      location?: number | null;
      /** Details */
      details?: Record<string, never> | null;
      /** Comments */
      comments?: string | null;
      /**
       * Name
       * @description Sample name, if not provided, the provided protein's name followed by the sample index is used
       */
      name?: string | null;
      /** Id */
      id: number;
      /** Shipmentid */
      shipmentId: number;
      /** Proteinid */
      proteinId: number;
      /** Parent */
      parent?: string | null;
      /** Type */
      type: string;
    };
    /** ShipmentChildren */
    ShipmentChildren: {
      /** Id */
      id: number;
      /** Name */
      name: string;
      /** Children */
      children: components["schemas"]["GenericItem"][];
      /** Data */
      data: Record<string, never>;
    };
    /** ShipmentIn */
    ShipmentIn: {
      /** Name */
      name: string;
      /** Comments */
      comments?: string | null;
    };
    /** ShipmentOut */
    ShipmentOut: {
      /** Id */
      id: number;
      /** Proposalcode */
      proposalCode: string;
      /** Proposalnumber */
      proposalNumber: number;
      /** Visitnumber */
      visitNumber: number;
      /** Name */
      name: string;
      /** Comments */
      comments?: string | null;
      /** Creationdate */
      creationDate: string | null;
      /** Status */
      status?: string | null;
      /** Shipmentrequest */
      shipmentRequest?: number | null;
    };
    /** TopLevelContainerIn */
    TopLevelContainerIn: {
      /** Toplevelcontainerid */
      topLevelContainerId?: number | null;
      /** Status */
      status?: string | null;
      /** Capacity */
      capacity?: number | null;
      /** Details */
      details?: Record<string, never> | null;
      /** Location */
      location?: number | null;
      /** Comments */
      comments?: string | null;
      /**
       * Name
       * @description Base top level container name. If name is not provided, the container's type followedby the container index is used
       */
      name?: string | null;
      /**
       * Type
       * @constant
       */
      type: "dewar";
      /** Code */
      code: string;
    };
    /** TopLevelContainerOut */
    TopLevelContainerOut: {
      /** Toplevelcontainerid */
      topLevelContainerId?: number | null;
      /** Status */
      status?: string | null;
      /** Capacity */
      capacity?: number | null;
      /** Details */
      details?: Record<string, never> | null;
      /** Location */
      location?: number | null;
      /** Comments */
      comments?: string | null;
      /**
       * Name
       * @description Base top level container name. If name is not provided, the container's type followedby the container index is used
       */
      name?: string | null;
      /** Id */
      id: number;
      /** Externalid */
      externalId?: number | null;
    };
    /** UnassignedItems */
    UnassignedItems: {
      /** Samples */
      samples: components["schemas"]["GenericItem"][];
      /** Gridboxes */
      gridBoxes: components["schemas"]["GenericItem"][];
      /** Containers */
      containers: components["schemas"]["GenericItem"][];
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  get_shipment_shipments__shipmentId__get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        shipmentId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ShipmentChildren"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_unassigned_shipments__shipmentId__unassigned_get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        shipmentId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UnassignedItems"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  push_shipment_shipments__shipmentId__push_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        shipmentId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_top_level_containers_shipments__shipmentId__topLevelContainers_get: {
    parameters: {
      query?: {
        /** @description Page number/Results to skip. Negative numbers count backwards from the last page */
        page?: number;
        /** @description Number of results to show */
        limit?: number;
      };
      header?: never;
      path: {
        shipmentId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Paged_TopLevelContainerOut_"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  create_top_level_container_shipments__shipmentId__topLevelContainers_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        shipmentId: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TopLevelContainerIn"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TopLevelContainerOut"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  create_container_shipments__shipmentId__containers_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        shipmentId: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ContainerIn"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ContainerOut"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_samples_shipments__shipmentId__samples_get: {
    parameters: {
      query?: {
        /** @description Page number/Results to skip. Negative numbers count backwards from the last page */
        page?: number;
        /** @description Number of results to show */
        limit?: number;
      };
      header?: never;
      path: {
        shipmentId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Paged_SampleOut_"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  create_sample_shipments__shipmentId__samples_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        shipmentId: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SampleIn"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Paged_SampleOut_"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_shipment_request_shipments__shipmentId__request_get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        shipmentId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      307: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  create_shipment_request_shipments__shipmentId__request_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        shipmentId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ShipmentOut"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_pre_session_shipments__shipmentId__preSession_get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        shipmentId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PreSessionOut"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  create_pre_session_shipments__shipmentId__preSession_put: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        shipmentId: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PreSessionIn"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PreSessionOut"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_shipments_proposals__proposalReference__sessions__visitNumber__shipments_get: {
    parameters: {
      query?: {
        /** @description Page number/Results to skip. Negative numbers count backwards from the last page */
        page?: number;
        /** @description Number of results to show */
        limit?: number;
      };
      header?: never;
      path: {
        proposalReference: string;
        visitNumber: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Paged_MixedShipment_"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  create_shipment_proposals__proposalReference__sessions__visitNumber__shipments_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        proposalReference: string;
        visitNumber: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ShipmentIn"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ShipmentOut"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_samples_proposals__proposalReference__sessions__visitNumber__samples_get: {
    parameters: {
      query?: {
        /** @description Page number/Results to skip. Negative numbers count backwards from the last page */
        page?: number;
        /** @description Number of results to show */
        limit?: number;
      };
      header?: never;
      path: {
        proposalReference: string;
        visitNumber: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Paged_SampleOut_"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_shipment_data_proposals__proposalReference__data_get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        proposalReference: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  delete_sample_samples__sampleId__delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        sampleId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  edit_sample_samples__sampleId__patch: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        sampleId: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["OptionalSample"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SampleOut"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  delete_container_containers__containerId__delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        containerId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  edit_container_containers__containerId__patch: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        containerId: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["OptionalContainer"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ContainerOut"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  delete_container_topLevelContainers__topLevelContainerId__delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        topLevelContainerId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  edit_container_topLevelContainers__topLevelContainerId__patch: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        topLevelContainerId: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["OptionalTopLevelContainer"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TopLevelContainerOut"];
        };
      };
      /** @description Validation Error */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
}
